(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('react'), require('react-router')) :
  typeof define === 'function' && define.amd ? define(['exports', 'react', 'react-router'], factory) :
  (global = global || self, factory(global['react-router-breadcrumbs-hoc'] = {}, global.React, global.ReactRouter));
}(this, function (exports, react, reactRouter) { 'use strict';

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function _objectSpread(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};
      var ownKeys = Object.keys(source);

      if (typeof Object.getOwnPropertySymbols === 'function') {
        ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
          return Object.getOwnPropertyDescriptor(source, sym).enumerable;
        }));
      }

      ownKeys.forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    }

    return target;
  }

  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;

    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      target[key] = source[key];
    }

    return target;
  }

  function _objectWithoutProperties(source, excluded) {
    if (source == null) return {};

    var target = _objectWithoutPropertiesLoose(source, excluded);

    var key, i;

    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
        target[key] = source[key];
      }
    }

    return target;
  }

  function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
  }

  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) {
      for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

      return arr2;
    }
  }

  function _iterableToArray(iter) {
    if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
  }

  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance");
  }

  var decamelize = function (str, sep) {
  	if (typeof str !== 'string') {
  		throw new TypeError('Expected a string');
  	}

  	sep = typeof sep === 'undefined' ? '_' : sep;

  	return str
  		.replace(/([a-z\d])([A-Z])/g, '$1' + sep + '$2')
  		.replace(/([A-Z]+)([A-Z][a-z\d]+)/g, '$1' + sep + '$2')
  		.toLowerCase();
  };

  var humanizeString = function (str) {
  	if (typeof str !== 'string') {
  		throw new TypeError('Expected a string');
  	}

  	str = decamelize(str);
  	str = str.toLowerCase().replace(/[_-]+/g, ' ').replace(/\s{2,}/g, ' ').trim();
  	str = str.charAt(0).toUpperCase() + str.slice(1);

  	return str;
  };

  var DEFAULT_MATCH_OPTIONS = {
    exact: true
  };
  var NO_BREADCRUMB = 'NO_BREADCRUMB';
  /**
   * Renders and returns the breadcrumb complete
   * with `match`, `location`, and `key` props.
   */

  var render = function render(_ref) {
    var component = _ref.component,
        breadcrumb = _ref.breadcrumb,
        match = _ref.match,
        location = _ref.location,
        rest = _objectWithoutProperties(_ref, ["component", "breadcrumb", "match", "location"]);

    var componentProps = _objectSpread({
      match: match,
      location: location,
      key: match.url
    }, rest);

    if (typeof breadcrumb === 'function') {
      return react.createElement(breadcrumb, componentProps);
    }

    return react.createElement('span', componentProps, breadcrumb);
  };
  /**
   * Small helper method to get a default `humanize-string`
   * breadcrumb if the user hasn't provided one.
  */


  var getDefaultBreadcrumb = function getDefaultBreadcrumb(_ref2) {
    var pathSection = _ref2.pathSection,
        currentSection = _ref2.currentSection,
        location = _ref2.location;
    var match = reactRouter.matchPath(pathSection, _objectSpread({}, DEFAULT_MATCH_OPTIONS, {
      path: pathSection
    }));
    return render({
      breadcrumb: humanizeString(currentSection),
      match: match,
      location: location
    });
  };
  /**
   * Loops through the route array (if provided) and returns either a
   * user-provided breadcrumb OR a sensible default (if enabled) via `humanize-string`.
  */


  var getBreadcrumb = function getBreadcrumb(_ref3) {
    var currentSection = _ref3.currentSection,
        disableDefaults = _ref3.disableDefaults,
        excludePaths = _ref3.excludePaths,
        location = _ref3.location,
        pathSection = _ref3.pathSection,
        routes = _ref3.routes;
    var breadcrumb; // Check the optional `exludePaths` option in `options` to see if the
    // current path should not include a breadcrumb.

    if (excludePaths && excludePaths.includes(pathSection)) {
      return NO_BREADCRUMB;
    } // Loop through the route array and see if the user has provided a custom breadcrumb.


    routes.some(function (_ref4) {
      var userProvidedBreadcrumb = _ref4.breadcrumb,
          matchOptions = _ref4.matchOptions,
          path = _ref4.path,
          rest = _objectWithoutProperties(_ref4, ["breadcrumb", "matchOptions", "path"]);

      if (!path) {
        throw new Error('withBreadcrumbs: `path` must be provided in every route object');
      }

      var match = reactRouter.matchPath(pathSection, _objectSpread({}, matchOptions || DEFAULT_MATCH_OPTIONS, {
        path: path
      })); // If user passed breadcrumb: null OR custom match options to suppress a breadcrumb
      // we need to know NOT to add it to the matches array
      // see: `if (breadcrumb !== NO_BREADCRUMB)` below.

      if (match && userProvidedBreadcrumb === null || !match && matchOptions) {
        breadcrumb = NO_BREADCRUMB;
        return true;
      }

      if (match) {
        // This covers the case where a user may be extending their react-router route
        // config with breadcrumbs, but also does not want default breadcrumbs to be
        // automatically generated (opt-in).
        if (!userProvidedBreadcrumb && disableDefaults) {
          breadcrumb = NO_BREADCRUMB;
          return true;
        }

        breadcrumb = render(_objectSpread({
          // Although we have a match, the user may be passing their react-router config object
          // which we support. The route config object may not have a `breadcrumb` param specified.
          // If this is the case, we should provide a default via `humanizeString`.
          breadcrumb: userProvidedBreadcrumb || humanizeString(currentSection),
          match: match,
          location: location
        }, rest));
        return true;
      }

      return false;
    }); // User provided a breadcrumb prop, or we generated one via `humanize-string` above.

    if (breadcrumb) {
      return breadcrumb;
    } // If there was no breadcrumb provided and user has disableDefaults turned on.


    if (disableDefaults) {
      return NO_BREADCRUMB;
    } // If the above conditionals don't fire, generate a default breadcrumb based on the path.


    return getDefaultBreadcrumb({
      pathSection: pathSection,
      // include a "Home" breadcrumb by default (can be overrode or disabled in config).
      currentSection: pathSection === '/' ? 'Home' : currentSection,
      location: location
    });
  };
  /**
   * Splits the pathname into sections, then search for matches in the routes
   * a user-provided breadcrumb OR a sensible default via `humanize-string`.
  */


  var getBreadcrumbs = function getBreadcrumbs(_ref5) {
    var routes = _ref5.routes,
        location = _ref5.location,
        _ref5$options = _ref5.options,
        options = _ref5$options === void 0 ? {} : _ref5$options;
    var matches = [];
    var pathname = location.pathname;
    pathname.split('?')[0] // Remove trailing slash "/" from pathname.
    .replace(/\/$/, '') // Split pathname into sections.
    .split('/') // Reduce over the sections and call `getBreadcrumb()` for each section.
    .reduce(function (previousSection, currentSection) {
      // Combine the last route section with the currentSection.
      // For example, `pathname = /1/2/3` results in match checks for
      // `/1`, `/1/2`, `/1/2/3`.
      var pathSection = !currentSection ? '/' : "".concat(previousSection, "/").concat(currentSection);
      var breadcrumb = getBreadcrumb(_objectSpread({
        currentSection: currentSection,
        location: location,
        pathSection: pathSection,
        routes: routes
      }, options)); // Add the breadcrumb to the matches array
      // unless the user has explicitly passed.
      // { path: x, breadcrumb: null } to disable.

      if (breadcrumb !== NO_BREADCRUMB) {
        matches.push(breadcrumb);
      }

      return pathSection === '/' ? '' : pathSection;
    }, null);
    return matches;
  };
  /**
   * Takes a route array and recursively flattens it IF there are
   * nested routes in the config.
  */

  var flattenRoutes = function flattenRoutes(routes) {
    return routes.reduce(function (arr, route) {
      if (route.routes) {
        return arr.concat([route].concat(_toConsumableArray(flattenRoutes(route.routes))));
      }

      return arr.concat(route);
    }, []);
  };

  var index = (function () {
    var routes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    var options = arguments.length > 1 ? arguments[1] : undefined;
    return function (Component) {
      return reactRouter.withRouter(function (props) {
        return react.createElement(Component, _objectSpread({}, props, {
          breadcrumbs: getBreadcrumbs({
            routes: flattenRoutes(routes),
            location: props.location,
            options: options
          })
        }));
      });
    };
  });

  exports.getBreadcrumbs = getBreadcrumbs;
  exports.default = index;

  Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=index.js.map
